from datetime import date
from pydantic import BaseModel, Field, EmailStr, ConfigDict, field_validator
from typing import Optional


class ContactBase(BaseModel):
    """
    Base schema for a contact, defining common fields and validation rules.

    This schema is used for both input and output models to ensure data
    consistency across different parts of the API.
    """

    first_name: str = Field(
        min_length=3, max_length=50, description="The contact's first name."
    )
    last_name: str = Field(
        min_length=3, max_length=50, description="The contact's last name."
    )
    email: EmailStr = Field(description="The contact's email address, must be unique.")
    phone_number: str = Field(
        pattern=r"^\+?\d{10,15}$",
        description="The contact's phone number, starting with an optional '+' and followed by 10 to 15 digits. Must be unique.",
    )
    birthday: date = Field(description="The contact's birthday.")
    other_info: Optional[str] = Field(
        None, description="Any additional information about the contact."
    )

    @field_validator("birthday")
    @classmethod
    def validate_birthday_is_not_in_future(cls, v: date) -> date:
        """
        Validator to ensure the birthday is not a future date.

        Args:
            v: The birthday date provided by the user.

        Raises:
            ValueError: If the provided birthday is a future date.

        Returns:
            The validated date object.
        """
        if v > date.today():
            raise ValueError("Birthday cannot be in the future!")
        return v


class ContactCreate(ContactBase):
    """
    Schema for creating a new contact.

    It inherits all fields and validation from ContactBase.
    'id' is omitted as it will be generated by the database.
    """

    pass


class ContactRespons(ContactBase):
    """
    Schema for a full contact object, including the database-generated ID.

    This schema is used for returning contact data from the API.
    """

    id: int = Field(description="The unique identifier for the contact.")
    user_id: int = Field(description="The unique identifier for the user.")

    # Configuration to allow Pydantic to create the model from ORM attributes.
    model_config = ConfigDict(from_attributes=True)


class ContactUpdate(BaseModel):
    """
    Schema for partially updating an existing contact.

    All fields are optional to allow for partial updates using the HTTP PATCH method.
    """

    first_name: Optional[str] = Field(
        None, min_length=3, max_length=50, description="The contact's first name."
    )
    last_name: Optional[str] = Field(
        None, min_length=3, max_length=50, description="The contact's last name."
    )
    email: Optional[EmailStr] = Field(None, description="The contact's email address.")
    phone_number: Optional[str] = Field(
        None, pattern=r"^\+?\d{10,15}$", description="The contact's phone number."
    )
    birthday: Optional[date] = Field(None, description="The contact's birthday.")
    other_info: Optional[str] = Field(
        None, description="Any additional information about the contact."
    )
